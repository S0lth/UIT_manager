@using System.Data.Common
@model IEnumerable<UITManagerWebServer.Models.Alarm>

@{
    ViewData["Title"] = "Alarms";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form method="post" id="alarm-status-update">
    @Html.AntiForgeryToken()
</form>

@functions {

    string GetSeveryticolor(string currentSeverity)
    {
        switch (currentSeverity)
        {
            case ("Critical"):
                return "text-danger";
            case ("High"):
                return "text-High";
            case ("Medium"):
                return "text-warning";
            case ("Low"):
                return "text-low";
            case ("Warning"):
                return "text-secondary";
        }

        return "text-secondary";
    }

}

@functions {
    string GetBGColorForAttribution(string? attribution)
    {
        return string.IsNullOrEmpty(attribution) ? "bg-danger text-white" : "bg-success text-white";
    }
}

@functions {

    string GetHeaderClass(string currentSortOrder, string column)
    {
        if (currentSortOrder == column || currentSortOrder == $"{column}_desc")
        {
            return "bg-selected-header";
        }

        return string.Empty;
    }

}

@functions {

    string GetSortIcon(string currentSortOrder, string column)
    {
        if (currentSortOrder == column)
        {
            return "bi bi-sort-down";
        }
        else if (currentSortOrder == $"{column}_desc")
        {
            return "bi bi-sort-up";
        }

        return "bi bi-arrow-down-up";
    }

}
<div id="alert-container" class="p-0 m-0"></div>
<div class="container-fluid py-5 px-4" style="max-width: 1700px;">
    <div class="row mb-2 fixed">
        <div class="col-lg-12">
            <h1 class="h2 fw-bold me-3">Alarms</h1>
            <div class="d-flex justify-content-between ">
                <div class=" align-items-center">
                    <div class="input-group" style="max-width: 400px;">
                        <div class="form-outline" data-mdb-input-init>
                            <input type="search" id="Search" class="form-control"
                                   placeholder="Search..."/>
                        </div>
                    </div>
                </div>

                <div class="d-flex align-items-center">
                    <span class="me-2 text-muted">Filtered by</span>
                    <form method="get" asp-action="Index" asp-controller="Alarms" class="d-flex align-items-center">
                        <select asp-for="@ViewData["sortOrder"]" name="sortOrder" class="form-select">
                            <
                            <option value="all">All</option>
                            <option value="assigned_to_me">Assigned to me</option>
                            <option value="assigned">Assigned</option>
                            <option value="unassigned">Unassigned</option>
                            <option value="triggered_today">Trigerred today</option>
                        </select>

                        <button type="submit" class="btn btn-primary btn-sm ms-2">Filter</button>
                        <a asp-action="Index" class="btn btn-secondary btn-sm ms-2">Reset</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card shadow-sm border-0 rounded">
                <div class="card-body">
                    <div>
                        <div class="table-responsive" style="overflow-x: auto; max-height: 600px;">
                            @if (Model.Count() == 0)
                            {
                                <div class="list-group-item text-center">
                                    <div class="alert alert-secondary" role="alert">
                                        this machine hasn't triggered any alarm yet
                                    </div>
                                </div>
                            }
                            else
                            {
                                <table class="table table-hover table-striped align-middle">
                                    <thead class="table-lightfix sticky-top ">
                                    <tr>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Machine") fix">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["MachineSortParm"]"
                                               class="text-decoration-none text-dark ">
                                                Host <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Machine")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Model")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["ModelSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Model <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Model")"></i>
                                            </a>
                                        </th>
                                        <th class=" bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Status")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["StatusSortParm"]"
                                               class="text-decoration-none text-dark">
                                                Status <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Status")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Severity")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["SeveritySortParm"]"
                                               class="text-decoration-none text-dark">
                                                Severity
                                                <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Severity")">
                                                </i>
                                            </a>
                                        </th>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "AlarmGroup")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["AlarmGroupSortParm"]"
                                               class="text-decoration-none text-dark">
                                                Alarm
                                                <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "AlarmGroup")">
                                                </i>
                                            </a>
                                        </th>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Date")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]"
                                               class="text-decoration-none text-dark">
                                                Date <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Date")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Attribution")">
                                            <a asp-action="Index"
                                               asp-route-sortOrder="@ViewData["AttributionSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Attribution <i
                                                    class="@GetSortIcon(ViewData["SortOrder"]?.ToString(), "Attribution")"></i>
                                            </a>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                <a asp-controller="Machine" asp-action="Details"
                                                   asp-route-id="@item.Machine.Id"
                                                   class="text-primary text-decoration-none">
                                                    @item.Machine.Name
                                                </a>
                                            </td>
                                            <td class="text-secondary">
                                                @item.Machine.Model
                                            </td>
                                            <td>
                                                <select style="max-width: 300px " class="form-select form-select-sm"
                                                        onchange="updateAlarmStatus(@item.Id, this.value)">
                                                    @foreach (var statusType in ViewData["AlarmStatusTypes"] as IEnumerable<UITManagerWebServer.Models.AlarmStatusType>)
                                                    {
                                                        @if (statusType.Name == @item.GetLatestAlarmHistory()
                                                                     ?.StatusType?.Name)
                                                        {
                                                            <option selected
                                                                    value="@statusType.Name">@statusType.Name </option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@statusType.Name">@statusType.Name</option>
                                                        }

                                                        <option disabled class="text-secondary fst-italic fw-light"
                                                                label="">@statusType.Description</option>
                                                    }
                                                </select>
                                            </td>
                                            <td class="@GetSeveryticolor(@item.NormGroup?.SeverityHistories.OrderByDescending(sh => sh.UpdateDate).FirstOrDefault()?.Severity?.Name)">@item.NormGroup?.SeverityHistories.OrderByDescending(sh => sh.UpdateDate).FirstOrDefault()?.Severity?.Name</td>

                                            <td class="text-secondary">
                                                <a asp-action="Details" asp-route-id="@item.Id"
                                                   asp-route-idMachine="@item.Machine.Id"
                                                   class="text-primary text-decoration-none">
                                                    @Html.DisplayFor(modelItem => item.NormGroup.Name)
                                                </a>
                                            </td>
                                            <td class="text-secondary">
                                                @Html.DisplayFor(modelItem => item.TriggeredAt)
                                            </td>
                                            <td>
                                                @if (@User.IsInRole("Technician"))
                                                {
                                                    if (@item.UserId == null)
                                                    {
                                                        <p clasx="text-secondary">Unattribued </p>
                                                    }
                                                    else
                                                    {
                                                        <p clasx="text-secondary">@item.User.FirstName @item.User.LastName </p>
                                                    }
                                                }
                                                else
                                                {
                                                    <select onchange="updateAlarmAttribution('@item.Id', value)"
                                                            class="form-select form-select-sm @GetBGColorForAttribution(@item.UserId)">
                                                        @{ bool isFirst = true; }
                                                        @foreach (var user in ViewData["user"] as IEnumerable<UITManagerWebServer.Models.ApplicationUser>)
                                                        {
                                                            if (@user.Id == @item.UserId && isFirst == true)
                                                            {
                                                                isFirst = false;

                                                                <option selected
                                                                        value="@user.Id"> @user.FirstName @user.LastName</option>
                                                            }
                                                            else if (@item.UserId == null && isFirst == true)
                                                            {
                                                                isFirst = false;
                                                                <option
                                                                    onclick="updateAlarmAttribution('@item.Id', '@user.Id')"
                                                                    selected value="">Unattribued
                                                                </option>
                                                            }
                                                            else
                                                            {
                                                                <option
                                                                    onclick="updateAlarmAttribution('@item.Id', '@user.Id')"
                                                                    value="@user.Id">@user.FirstName @user.LastName</option>
                                                            }
                                                        }
                                                    </select>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function updateAlarmStatus(alarmId, status) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        if (!token) {
            showAlert('CSRF token is missing.', 'danger');
            return;
        }

        fetch(`/Alarms/UpdateStatus`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
            },
            body: JSON.stringify({id: alarmId, status: status})
        }).then(response => {
            if (response.ok) {
                showAlert('Status updated successfully!', 'success');
            } else {
                showAlert('Error updating status.', 'danger');
            }
        }).catch(error => {
            showAlert('Network error updating status.', 'danger');
        });
    }

    async function updateAlarmAttribution(alarmId, userId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        if (!token) {
            showAlert('CSRF token is missing.', 'danger');
            return;
        }

        if (!alarmId || !userId) {
            showAlert('Invalid alarm or user ID.', 'danger');
            return;
        }

        try {
            const response = await fetch('/Alarms/Attribution', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    id: alarmId,
                    userId: userId
                })
            });

            if (response.ok) {
                showAlert('Attribution updated successfully!', 'success');
            } else {
                showAlert('Error: Failed to update attribution. Status code: ' + response.status, 'danger');
            }
        } catch (error) {
            console.error('Network or server error:', error);
            showAlert('An error occurred while updating the attribution.', 'danger');
        }
    }



    document.getElementById('Search').addEventListener('keyup', function () {
        const searchValue = this.value.toLowerCase();
        const tableRows = document.querySelectorAll('table tbody tr');

        tableRows.forEach(row => {
            const cells = row.querySelectorAll('td');
            let match = false;

            cells.forEach(cell => {
                if (cell.textContent.toLowerCase().includes(searchValue)) {
                    match = true;
                }
            });


            if (match) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.role = 'alert';
        alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

        alertContainer.appendChild(alertDiv);

        setTimeout(() => alertDiv.remove(), 5000);
    }

</script>