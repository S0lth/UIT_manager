@using Markdig
@model UITManagerWebServer.Models.Note

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseEmojiAndSmiley()
        .UsePipeTables()
        .UseGridTables()
        .UseFootnotes()
        .UseAbbreviations()
        .UseCustomContainers()
        .UseGenericAttributes()
        .UseTaskLists()
        .UseEmphasisExtras()
        .UseDefinitionLists()
        .UseAutoLinks()
        .EnableTrackTrivia()
        .UsePreciseSourceLocation()
        .Build();

    var htmlContent = Markdig.Markdown.ToHtml(Model.Content, markdownPipeline);
}

<div class="container-fluid py-5 px-4 max-display-size">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-md-10">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2 fw-bold">Note Details</h1>
            </div>
            <div class="card shadow-sm border-0 rounded-lg">
                <div class="card-header bg-light d-flex justify-content-between align-items-start border-bottom-0">
                    <div class="d-flex flex-column note-title-div">
                        <h4 class="card-title mb-0 text-truncate note-title">
                            @Html.DisplayFor(model => model.Title)
                        </h4>
                        <p class="text-muted mb-0">Created
                            by @Model.Author.LastName @Model.Author.FirstName on @Model.CreatedAt.ToString("yyyy-MM-dd")</p>
                    </div>
                    <div class="d-flex flex-column align-items-end">
                        <span class="badge @((Model.IsSolution) ? "bg-success" : "bg-secondary") mb-2">
                            @((Model.IsSolution) ? "Solution" : "Follow-Up")
                        </span>
                        <span class="badge bg-info">
                            @Html.DisplayFor(model => model.Machine.Name)
                        </span>
                    </div>
                </div>

                <div class="card-body note-body">
                    <div class="note-content mb-4">
                        <div class="markdown-content">
                            @Html.Raw(htmlContent)
                        </div>
                    </div>

                    <div class="row">
                        @foreach (var file in Model.Files)
                        {
                            <div class="col-6 col-sm-4 col-md-3 mb-3">
                                <a href="#"
                                   data-bs-toggle="modal"
                                   data-bs-target="#imageModal"
                                   class="thumbnail-link"
                                   data-file-id="@file.Id">
                                    <img src="/files/@file.Id"
                                         alt="@file.FileName"
                                         class="img-thumbnail w-40 h-40 note-image" />
                                </a>
                            </div>
                        }
                    </div>

                    <!-- Modal image preview -->
                    <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel"
                         aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                            aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <img id="modalImage" src="" alt="Image" class="img-fluid rounded"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer text-center bg-light border-top-0">
                    <div class="d-flex justify-content-end gap-3">
                        @{
                            var previousUrl = TempData["PreviousUrl"]?.ToString();
                            string previousPageName = "Previous Page";

                            if (!string.IsNullOrEmpty(previousUrl))
                            {
                                var uri = new Uri(previousUrl);
                                var path = uri.AbsolutePath;

                                // Si l'URL est la racine, on considère que c'est la page d'accueil
                                if (string.IsNullOrEmpty(path) || path == "/")
                                {
                                    previousPageName = "Home";
                                }
                                else
                                {
                                    // Séparation du chemin en segments
                                    var segments = path.Split('/');

                                    // Si l'URL contient plus de deux segments (la racine + deux autres), on utilise les segments 1 et 2 pour former le nom
                                    if (segments.Length >= 3)
                                    {
                                        previousPageName = string.Join(" ", segments[1], segments[2]).Replace("-", " ");
                                    }
                                    // Si l'URL ne contient pas suffisamment de segments, on prend seulement le dernier segment
                                    else if (segments.Length == 2)
                                    {
                                        previousPageName = segments[1].Replace("-", " ");
                                    }
                                    else
                                    {
                                        previousPageName = segments.LastOrDefault()?.Replace("-", " ") ?? "Previous Page";
                                    }
                                }
                            }
                        }

                        @if (previousUrl != null)
                        {
                            <a class="btn btn-outline-dark" href="@previousUrl">
                                Back to @previousPageName
                            </a>
                        }

                        <a class="btn btn-outline-primary" asp-action="Index">
                            View all notes
                        </a>
                        <a class="btn btn-outline-primary" asp-controller="Machine" asp-action="Details"
                           asp-route-id="@Model.MachineId">
                            See machine details
                        </a>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
