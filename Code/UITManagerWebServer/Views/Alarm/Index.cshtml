@using Microsoft.AspNetCore.Mvc.TagHelpers
@using UITManagerWebServer.Helpers
@model IEnumerable<UITManagerWebServer.Models.Alarm>

@{
    ViewData["Title"] = "Alarm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="alert-container" class="p-0 m-0"></div>
<div class="container-fluid px-4 max-display-size">
    <div class="row mb-2 fixed">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="h2 fw-bold">Raised alarms</h1>
            <div class="d-flex gap-3">
                <div class="align-items-center">
                    <div class="input-group search">
                        <div class="form-outline" data-mdb-input-init>
                            <input type="search" id="Search" class="form-control" placeholder="Search..."/>
                        </div>
                    </div>
                </div>

                <div class="d-flex align-items-center">
                    <span class="me-2 text-muted">Filtered by</span>
                    <form method="get" asp-action="Index" asp-controller="Alarm" class="d-flex align-items-center">
                        <select asp-for="@ViewData["sortOrder"]" name="sortOrder" class="form-select">
                            <option value="all">All</option>
                            <option value="assigned_to_me">Assigned to me</option>
                            <option value="assigned">Assigned</option>
                            <option value="unassigned">Unassigned</option>
                            <option value="triggered_today">Triggered today</option>
                        </select>

                        <button type="submit" class="btn btn-primary btn-sm ms-2">Filter</button>
                        <a asp-action="Index" class="btn btn-secondary btn-sm ms-2">Reset</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card shadow-sm border-0 rounded">
                <div class="card-body">
                    <div>
                        <div class="table-responsive list-note">
                            @if (Model.Count() == 0)
                            {
                                <div class="list-group-item text-center">
                                    <div class="alert alert-secondary" role="alert">
                                        this machine hasn't triggered any alarms yet
                                    </div>
                                </div>
                            }
                            else
                            {
                                <table class="table table-hover table-striped align-middle">
                                    <thead class="table-lightfix sticky-top ">
                                    <tr>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Machine") fix">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["MachineSortParam"]"
                                               class="text-decoration-none text-dark ">
                                                Host <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Machine")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Model")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["ModelSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Model <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Model")"></i>
                                            </a>
                                        </th>
                                        <th class=" bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Status")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["StatusSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Status <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Status")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Severity")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["SeveritySortParam"]"
                                               class="text-decoration-none text-dark">
                                                Severity
                                                <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Severity")">
                                                </i>
                                            </a>
                                        </th>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "AlarmGroup")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["AlarmGroupSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Alarm
                                                <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "AlarmGroup")">
                                                </i>
                                            </a>
                                        </th>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Date")">
                                            <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Date <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Date")"></i>
                                            </a>
                                        </th>
                                        <th class="bg-white @ViewHelpers.GetHeaderClass(ViewData["SortOrder"]?.ToString(), "Attribution")">
                                            <a asp-action="Index"
                                               asp-route-sortOrder="@ViewData["AttributionSortParam"]"
                                               class="text-decoration-none text-dark">
                                                Attribution <i
                                                    class="@ViewHelpers.GetSortIcon(ViewData["SortOrder"]?.ToString(), "Attribution")"></i>
                                            </a>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                <a asp-controller="Machine" asp-action="Details"
                                                   asp-route-id="@item.Machine.Id"
                                                   class="text-primary text-decoration-none">
                                                    @item.Machine.Name
                                                </a>
                                            </td>
                                            <td class="text-secondary">
                                                @item.Machine.Model
                                            </td>
                                            <td>
                                                <div class="dropdown">
                                                    <button class="btn btn-light dropdown-toggle" type="button"
                                                            id="dropdownMenuButton" data-bs-toggle="dropdown"
                                                            aria-expanded="false" data-alarm-id="@item.Id">
                                                        @item.GetLatestAlarmHistory()?.StatusType?.Name
                                                    </button>

                                                    <ul class="dropdown-menu color-white"
                                                        aria-labelledby="dropdownMenuButton"
                                                    >
                                                        @foreach (var statusType in ViewData["AlarmStatusTypes"] as IEnumerable<UITManagerWebServer.Models.AlarmStatusType>)
                                                        {
                                                            <li>
                                                                <a
                                                                    href="#"
                                                                    class="dropdown-item update-alarm"
                                                                    data-model-id="@item.Id"
                                                                    data-status-name="@statusType.Name">
                                                                    <strong>@statusType.Name</strong>
                                                                    <div
                                                                        class="text-muted ms-2">@statusType.Description</div>
                                                                </a>
                                                            </li>
                                                        }
                                                    </ul>
                                                </div>
                                            </td>
                                            <td class="@ViewHelpers.GetSeveryticolor(@item.NormGroup?.SeverityHistories.OrderByDescending(sh => sh.UpdateDate).FirstOrDefault()?.Severity?.Name)">@item.NormGroup?.SeverityHistories.OrderByDescending(sh => sh.UpdateDate).FirstOrDefault()?.Severity?.Name</td>

                                            <td class="text-secondary">
                                                <a asp-action="Details" asp-route-id="@item.Id"
                                                   asp-route-idMachine="@item.Machine.Id"
                                                   class="text-primary text-decoration-none">
                                                    @Html.DisplayFor(modelItem => item.NormGroup.Name)
                                                </a>
                                            </td>
                                            <td class="text-secondary">
                                                @Html.DisplayFor(modelItem => item.TriggeredAt)
                                            </td>
                                            <td>
                                                @if (@User.IsInRole("Technician"))
                                                {
                                                    if (@item.UserId == null)
                                                    {
                                                        <p clasx="text-secondary">Unattribued </p>
                                                    }
                                                    else
                                                    {
                                                        <p clasx="text-secondary">@item.User.FirstName @item.User.LastName </p>
                                                    }
                                                }
                                                else
                                                {
                                                    <select
                                                        class="form-select form-select-sm @ViewHelpers.GetBGColorForAttribution(@item.UserId)"
                                                        data-item-id="@item.Id">
                                                        @{ bool isFirst = true; }
                                                        @foreach (var user in ViewData["user"] as IEnumerable<UITManagerWebServer.Models.ApplicationUser>)
                                                        {
                                                            if (@user.Id == @item.UserId && isFirst == true)
                                                            {
                                                                isFirst = false;

                                                                <option selected
                                                                        value="@user.Id"> @user.FirstName @user.LastName</option>
                                                            }
                                                            else if (@item.UserId == null && isFirst == true)
                                                            {
                                                                isFirst = false;
                                                                <option
                                                                    class="update-alarm-attribution"
                                                                    data-item-id="@item.Id"
                                                                    data-user-id="@user.Id"
                                                                    value="">
                                                                    Unattributed
                                                                </option>
                                                            }
                                                            else
                                                            {
                                                                <option
                                                                    class="update-alarm-attribution"
                                                                    data-item-id="@item.Id"
                                                                    data-user-id="@user.Id"
                                                                    value="@user.Id">
                                                                    @user.FirstName @user.LastName
                                                                </option>
                                                            }
                                                        }
                                                    </select>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script nonce="function526">
    document.addEventListener("DOMContentLoaded", function () {
        document.addEventListener("click", function (event) {
            const target = event.target;


            if (target.classList.contains("update-alarm") || target.closest(".update-alarm")) {
                event.preventDefault();

                const alarmElement = target.closest(".update-alarm");
                const modelId = alarmElement.getAttribute("data-model-id");
                const statusName = alarmElement.getAttribute("data-status-name");

                updateAlarmStatus(modelId, statusName);
            }
        });
    });


    async function updateAlarmStatus(alarmId, status) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        if (!token) {
            showAlert('CSRF token is missing.', 'danger');
            return;
        }

        await fetch(`/Alarm/UpdateStatus`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
            },
            body: JSON.stringify({id: alarmId, status: status})
        }).then(async response => {
            if (response.ok) {
                document.getElementById('alert-container').innerHTML = await response.text();
                setTimeout(() => document.getElementById('alert-container').innerHTML = '', 5000);

                const dropdownButton = document.querySelector(`#dropdownMenuButton[data-alarm-id="${alarmId}"]`);
                if (dropdownButton) {
                    dropdownButton.textContent = status;
                }

                const dropdownItems = dropdownButton?.nextElementSibling.querySelectorAll('.dropdown-item');
                dropdownItems.forEach(item => {
                    if (item.textContent.trim() === status) {
                        item.classList.add('active');
                    } else {
                        item.classList.remove('active');
                    }
                });
            }
        }).catch(error => {
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const selectElement = document.querySelector("select"); // Remplacez par l'ID ou la classe du select si nécessaire

        if (selectElement) {
            selectElement.addEventListener("change", function (event) {
                const selectedOption = event.target.options[event.target.selectedIndex];

                // Vérifiez si l'option sélectionnée a les attributs nécessaires
                if (selectedOption.classList.contains("update-alarm-attribution")) {
                    const itemId = selectedOption.getAttribute("data-item-id");
                    const userId = selectedOption.getAttribute("data-user-id");

                    // Appelez la fonction avec les données récupérées
                    updateAlarmAttribution(itemId, userId);
                }
            });
        }
    });

    async function updateAlarmAttribution(alarmId, userId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        try {
            const response = await fetch('/Alarm/Attribution', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    id: alarmId,
                    userId: userId
                })
            });
            if (response.ok) {
                const alertMessage = await response.text();
                document.getElementById('alert-container').innerHTML = alertMessage;
                setTimeout(() => document.getElementById('alert-container').innerHTML = '', 5000);
            }

        } catch (error) {
            console.error('Network or server error:', error);
        }
    }


    document.getElementById('Search').addEventListener('keyup', function () {
        const searchValue = this.value.toLowerCase();
        const tableRows = document.querySelectorAll('table tbody tr');

        tableRows.forEach(row => {
            const cells = row.querySelectorAll('td');
            let match = false;

            cells.forEach(cell => {
                if (cell.textContent.toLowerCase().includes(searchValue)) {
                    match = true;
                }
            });


            if (match) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.role = 'alert';
        alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

        alertContainer.appendChild(alertDiv);

        setTimeout(() => alertDiv.remove(), 5000);
    }


</script>