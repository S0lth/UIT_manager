@using UITManagerWebServer.Helpers
@using UITManagerWebServer.Models
@model UITManagerWebServer.Models.Alarm
@{
    var userIsAuthorized = User.IsInRole("IT Director") || User.IsInRole("Maintenance Manager");
    var latestSeverityHistory = Model.NormGroup.SeverityHistories
        .OrderByDescending(sh => sh.UpdateDate)
        .FirstOrDefault();

    var latestSeverityName = latestSeverityHistory?.Severity?.Name;

    var latestStatusHistory = Model.AlarmHistories
        .OrderByDescending(sh => sh.ModificationDate)
        .FirstOrDefault();
}

<div class="card rounded mb-0 p-1">
    <div class="card-header fw-bold d-flex justify-content-between align-items-center mb-2" style="height: 50px;">
        <span>Alarm Information</span>
        <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#infoModal">
            <i class="bi bi-info-circle"></i>
        </button>
    </div>
    <div class="row mb-2">
        <div class="col-12">
            <div class="card shadow-lg rounded border-3 border-primary">
                <div class="card-body m-2 p-1">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex flex-column">
                                <p class="mb-0 fw-bold">Alarm</p>
                                <div class="text-muted">
                                    @Model.NormGroup.Name
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-1">
                            <div class="d-flex flex-column">
                                <p class="mb-0 fw-bold">Alarm severity</p>
                                <div class="text-muted">
                                    <div class="@ViewHelpers.GetSeveryticolor(@latestSeverityName)">
                                        @latestSeverityName
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 mb-1">
                            <div class="d-flex flex-column">
                                <p class="mb-0 fw-bold">Triggered date</p>
                                <div class="text-muted">
                                    <div>@Model.TriggeredAt.ToString("dd-MM-yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex flex-column">
                                <label for="AlarmStatus"><strong>Status</strong></label>
                                <div class="dropdown">
                                    <button class="btn btn-light dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false" data-alarm-id="@Model.Id" style="max-width: 300px;">
                                        <span>@Model.AlarmHistories.OrderByDescending(a => a.ModificationDate).FirstOrDefault().StatusType.Name</span>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="background-color: white;">
                                        @foreach (var status in ViewData["AlarmStatusTypes"] as List<AlarmStatusType>)
                                        {
                                            <li>
                                                <a class="dropdown-item" onclick="updateAlarmStatus(@Model.Id, '@status.Name')">
                                                    <strong>@status.Name</strong>
                                                    <div class="text-muted ms-2">@status.Description</div>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card shadow-lg border-0 rounded h-100">
                <div class="card-header fw-bold d-flex align-items-center">
                    Machine Concerned
                </div>
                <div class="card-body">
                    <div class="d-flex flex-column">
                        <div class="d-flex mb-2 align-items-center">
                            <p class="mb-0 fw-bold me-2">Machine name</p>
                            <div class="text-muted">
                                @Model.Machine.Name
                            </div>
                        </div>
                        <div class="d-flex mb-2 align-items-center">
                            <p class="mb-0 fw-bold me-2">Machine service tag</p>
                            <div class="text-muted">
                                @Model.Machine.GetInformationValueByName("Tag Service")
                            </div>
                        </div>
                        <div class="d-flex mb-2 align-items-center">
                            <p class="mb-0 fw-bold me-2">Machine last seen</p>
                            <div class="text-muted">
                                @Model.Machine.LastSeen
                            </div>
                        </div>
                        <div class="d-flex mb-1 align-items-center">
                            <p class="mb-0 fw-bold me-2">Machine State</p>
                            <div class="d-flex align-items-center">
                                @if (Model.Machine.IsWorking)
                                {
                                    <span class="text-success" style="line-height: 1.25;">Working</span>
                                }
                                else
                                {
                                    <span class="text-danger" style="line-height: 1.25;">Not working</span>
                                }
                            </div>
                        </div>

                    </div>
                </div>

            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-lg border-0 rounded h-100">
                <div class="card-header fw-bold d-flex align-items-center">
                    Informations
                </div>
                <div class="card-body">
                    <div class="d-flex flex-column">
                        <div class="d-flex flex-column">
                            <p class="mb-0 fw-bold">Concerned Alarms</p>
                            <div class="text-muted mt-1">
                                @Model.NormGroup.Name
                            </div>
                        </div>
                        <div class="d-flex flex-column">
                            <p class="mb-0 fw-bold">Occurrences</p>
                            <div class="d-flex align-items-center mt-1">
                                <p class="text-muted mb-0 me-2">On all machines</p>
                                <div class="badge bg-primary badge-sm">
                                    @ViewData["AlarmCountAll"]
                                </div>
                            </div>
                            <div class="d-flex align-items-center mt-1">
                                <p class="text-muted mb-0 me-2">On this machine</p>
                                <div class="badge bg-primary badge-sm">
                                    @ViewData["AlarmCount"]
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel">Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Total Occurrences: alarms of the same type triggered on this all machines.</p>
                    <p>Machine Occurrences: alarms of the same type triggered on this machine.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    async function updateAlarmStatus(alarmId, status) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        if (!token) {
            showAlert('CSRF token is missing.', 'danger');
            return;
        }

        await fetch(`/Alarm/UpdateStatus`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
            },
            body: JSON.stringify({id: alarmId, status: status})
        }).then(async response => {
            if (response.ok) {
                document.getElementById('alert-container').innerHTML = await response.text();
                setTimeout(() => document.getElementById('alert-container').innerHTML = '', 5000);

                const dropdownButton = document.querySelector(`#dropdownMenuButton[data-alarm-id="${alarmId}"]`);
                if (dropdownButton) {
                    dropdownButton.textContent = status;
                }

                const dropdownItems = dropdownButton?.nextElementSibling.querySelectorAll('.dropdown-item');
                dropdownItems.forEach(item => {
                    if (item.textContent.trim() === status) {
                        item.classList.add('active');
                    } else {
                        item.classList.remove('active');
                    }
                });
            }
        }).catch(error => {
        });
    }
</script>