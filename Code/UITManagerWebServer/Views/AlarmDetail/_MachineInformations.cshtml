@model UITManagerWebServer.Models.Alarm
@{
    var machine = (UITManagerWebServer.Models.ModelsView.DetailViewModel)ViewData["Machine"];
}

<h5 class="fw-bold text-uppercase">Machine Details</h5>
<div class="card shadow-sm border-0 rounded mb-4 p-4" style="overflow-x: auto; max-height: 250px;">


    <div class="container mt-4">
        <div class="row border-bottom pb-2">
            <div class="col-4 font-weight-bold">Machine Model:</div>
            <div class="col-8">@machine.Model</div>
        </div>
        <div class="row border-bottom py-2">
            <div class="col-4 font-weight-bold">CPU Model:</div>
            <div class="col-8">
                @machine.Informations.FirstOrDefault(obj => obj.Name.Contains("CPU", StringComparison.OrdinalIgnoreCase))?.Children.FirstOrDefault(o => o.Name.Contains("Model", StringComparison.OrdinalIgnoreCase)).Value
            </div>
        </div>
        @{
            bool first = true;
        }
        @foreach (var diskComponent in machine.Informations.Where(c => c.Name == "List Disk"))
        {
            var disks = diskComponent.Children.FirstOrDefault(c => c.Name == "Disks")?.Children;
            if (disks != null)
            {
                foreach (var disk in disks)
                {
                    var diskName = disk.Name;
                    var totalSize = disk.Children.FirstOrDefault(v => v.Name == "Disk Total Size")?.Value;
                    var freeSize = disk.Children.FirstOrDefault(v => v.Name == "Disk Free Size")?.Value;

                    if (decimal.TryParse(totalSize?.Replace("Go", "").Trim(), out var res) &&
                        decimal.TryParse(freeSize?.Replace("Go", "").Trim(), out var free))
                    {
                        var usedSpace = res - free;
                        <div class="row border-bottom py-2">
                            <div class="col-4 font-weight-bold">@((first) ? "Disk:" : "")</div>
                            <div class="col-8">@diskName: @usedSpace Go / @res Go</div>
                        </div>
                        first = false;
                    }
                    else
                    {
                        <div class="row border-bottom py-2">
                            <div class="col-4 font-weight-bold">@diskName:</div>
                            <div class="col-8 text-danger">Invalid Total or Free Size</div>
                        </div>
                    }
                }
            }
            else
            {
                <div class="row border-bottom py-2">
                    <div class="col-12 text-center">No disks found.</div>
                </div>
            }
        }

        @{
            var osComponent = machine.Informations.FirstOrDefault(c => c.Name == "OS");
            var osName = osComponent?.Children.FirstOrDefault(v => v.Name == "OS Name")?.Value;
            var osVersion = osComponent?.Children.FirstOrDefault(v => v.Name == "Os Version")?.Value;
            var osBuild = osComponent?.Children.FirstOrDefault(v => v.Name == "Os Build")?.Value;
        }
        <div class="row border-bottom py-2">
            <div class="col-4 font-weight-bold">OS:</div>
            <div class="col-8">@osName @osVersion @osBuild</div>
        </div>
        <div class="row border-bottom py-2">
            <div class="col-4 font-weight-bold">RAM:</div>
            <div class="col-8">
                @{
                    var ramComponent = machine.Informations.FirstOrDefault(c => c.Name == "Ram");
                    var totalRam = ramComponent?.Children.FirstOrDefault(v => v.Name == "Total RAM").Value;
                    var usedRam = ramComponent?.Children.FirstOrDefault(v => v.Name == "Used RAM").Value;

                    if (decimal.TryParse(totalRam?.Replace(" Go", "").Trim(), out var total) &&
                        decimal.TryParse(usedRam?.Replace(" Go", "").Trim(), out var used))
                    {
                        @($"{used} Go / {total} Go")
                    }
                    else
                    {
                        @("N/A")
                    }
                }
            </div>
        </div>
        <div class="row py-2">
            <div class="col-4 font-weight-bold">Direct X:</div>
            <div class="col-8">
                @{
                    var directXVersion = machine.Informations.FirstOrDefault(v => v.Name == "Direct X").Value;
                    @directXVersion
                }
            </div>
        </div>
    </div>
</div>