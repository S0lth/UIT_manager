# .NET Multi-Solution CI/CD Pipeline pour GitLab
# Ce script gère plusieurs solutions dans un dossier spécifique.
# Il utilise les étapes build, test, et upload des artefacts pour chaque solution.

variables:
  NUGET_PATH: 'C:\NuGet\nuget.exe'
  MSBUILD_PATH: 'C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe'

stages:
  - build
  - test
  - deploy

build_uitmanageragent:
  stage: build
  script:
    - 'dotnet restore ./Code/UITManagerAgent.sln'
    - 'dotnet build --no-restore ./Code/UITManagerAgent.sln'
  artifacts:
    paths:
      - './Code/UITManagerAgent/bin/Release'
    expire_in: 1 week

test_uitmanageragent:
  stage: test
  script:
    - 'dotnet test --no-build ./Code/UITManagerAgent.sln --logger "trx;LogFileName=UITManagerAgent_test_results.trx"'
  artifacts:
    when: always
    paths:
      - 'UITManagerAgent_test_results.trx'
    expire_in: 1 week
  dependencies:
    - build_uitmanageragent

# Ajouter d'autres jobs pour chaque solution supplémentaire (par exemple, SolutionB, SolutionC)
# En dupliquant le bloc `build_solution` et `test_solution` en remplaçant `UITManagerAgent` par le nom de chaque solution

deploy_artifacts:
  stage: deploy
  script:
    # On déploie ou sauvegarde les artefacts, par exemple, en les copiant vers un répertoire de déploiement
    - mkdir -p "$CI_PROJECT_DIR/deployment"
    - cp ./Code/UITManagerAgent/bin/Release/* "$CI_PROJECT_DIR/deployment/"
  artifacts:
    paths:
      - "$CI_PROJECT_DIR/deployment"
    expire_in: 1 week
  dependencies:
    - build_uitmanageragent
    - test_uitmanageragent
  environment:
    name: production
